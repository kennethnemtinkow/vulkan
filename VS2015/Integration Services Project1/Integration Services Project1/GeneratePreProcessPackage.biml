<Biml xmlns="http://schemas.varigence.com/biml.xsd">
	
<!--Get Connections-->

  <!-- ConfigConnString:  Add the connection to your config server/database here  -->


<# 
    String ConfigConnString="Data Source=VulkanDemoProd;Initial Catalog=VulkanConfig;Integrated Security=SSPI;Persist Security Info=False;Provider=SQLOLEDB.1"; 
	DataTable restoreList = ExternalDataAccess.GetDataTable(ConfigConnString, "SELECT DISTINCT [SubSystemName],[DestinationServer],[DestinationDatabase],[SourceDataBase], [RecoverModeDestinationServer],CASE WHEN FullOrPartialBackup = 'Partial' THEN 'PARTIAL,' ELSE '' END AS PartialBackupRestore,[FilePathBakFileSourceServer],[FilePathBakFileDestinationServer],[FilePathBakFileDestinationServerRemoteAccess] FROM [vulkan].[BaseConfiguration]");
	DataTable databaseList = ExternalDataAccess.GetDataTable(ConfigConnString, "SELECT DISTINCT [SourceServer],[SourceDatabase] FROM [vulkan].[PartitionedTablesConfiguration]  WHERE Active = 'y'");
	DataTable serverList = ExternalDataAccess.GetDataTable(ConfigConnString, "SELECT DISTINCT DestinationServer FROM [vulkan].[MergeConfiguration]");
	DataTable indexList = ExternalDataAccess.GetDataTable(ConfigConnString, "SELECT DISTINCT [SubSystemName],[SourceServer],[SourceDatabase],[DestinationServer],[DestinationDatabase] FROM [vulkan].[PartitionedTablesConfiguration] WHERE Active = 'y'");
	
	#>
	
	
	
 <Connections>
	 <# foreach(DataRow db in databaseList.Rows) { 
			String srvr = db["SourceServer"].ToString();
		    String dbName = db["SourceDatabase"].ToString();
	 #>
	
    <Connection Name="<#=srvr#>.<#=dbName#>" ConnectionString="Data Source=<#=srvr#>;Initial Catalog=<#=dbName#>;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
     <#}#>
		 
		 
	<# foreach(DataRow srv in serverList.Rows) {
			String srvr = srv["DestinationServer"].ToString();
	#>
	<Connection Name="<#=srvr#>.master" ConnectionString="Data Source=<#=srvr#>;Initial Catalog=master;Integrated Security=SSPI;Persist Security Info=False;Provider=SQLOLEDB.1;" />
	<#}#>	 
		
	 <OleDbConnection Name="DBConnection.PartitionConfigServer" ConnectionString="Data Source=VulkanDemoProd;Initial Catalog=VulkanConfig;Integrated Security=SSPI;Persist Security Info=False;Provider=SQLOLEDB.1"></OleDbConnection>
  	
	 
   </Connections>	
	
	
	
	<Packages>
	
	  <!-- ConnString:  Add the connection to your config server/database here  -->
		
		<# foreach(DataRow Inx in indexList.Rows) 
		{
					
			String subSystem = Inx["SubSystemName"].ToString();
			
			String srcSrvr = Inx["SourceServer"].ToString();
			
			String destSrvr = Inx["DestinationServer"].ToString();
			
			String srcDbName = Inx["SourceDataBase"].ToString();
			
			String destDbName = Inx["DestinationDataBase"].ToString();
	
		    String ConnString="Data Source=VulkanDemoProd;Initial Catalog=VulkanConfig;User Id=vulkanbiml;Password=TitanStopSign2%;Persist Security Info=False;"; 
			
	
			

			
			
		#>
		<Package Name="PreProcess_<#=subSystem#>_<#=srcDbName#>">
		
	 
			
	    <Variables>		
			
		    <Variable Name="LogServerConnectionstring" DataType="String" IncludeInDebugDump="Exclude">Data Source=utvsql195dwh.spvutvikling.no;Initial Catalog=ConfigLog;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;</Variable>
      
		
	
         <Variable Name="CurrentTable" DataType="String" IncludeInDebugDump="Exclude"></Variable>
			
        <Variable Name="DestinationDatabase" DataType="String" IncludeInDebugDump="Exclude"><#=destDbName#></Variable>
			
        <Variable Name="DestinationServer" DataType="String" IncludeInDebugDump="Exclude"><#=destSrvr#></Variable>
			
        <Variable Name="SourceDatabase" DataType="String" IncludeInDebugDump="Exclude"><#=srcDbName#></Variable>
			
        <Variable Name="SourceServer" DataType="String" IncludeInDebugDump="Exclude"><#=srcSrvr#></Variable>
			
        <Variable Name="SubSystem" DataType="String" IncludeInDebugDump="Exclude"><#=subSystem#></Variable>
			
        <Variable Name="Tables" DataType="Object" IncludeInDebugDump="Include">0</Variable>
			
	    <Variable Name="RunDate" DataType="String" IncludeInDebugDump="Exclude"></Variable>
			
			<Variable Name="DropIndexScripts" DataType="Object" IncludeInDebugDump="Include">0</Variable>
			
			 <Variable Name="CurrentDropIndexScript" DataType="String" IncludeInDebugDump="Exclude"></Variable>
			
			 <Variable Name="CurrentSchema" DataType="String" IncludeInDebugDump="Exclude"></Variable>

      
		
			
			
		
			
			
		</Variables>
				   
			
			<Tasks>
				
				<Container Name="Pakkens innhold" ForcedExecutionValueDataType="Empty" ConstraintMode="Parallel">
          
          
          <Tasks>
      
				 <!--Specific task: Create Data flow transformation to load table.-->
			  
			  
			  
			          <ExecuteSQL Name="Set RunData Variable" ConnectionName="DBConnection.PartitionConfigServer" ResultSet="SingleRow">
						  <Results>
							  <Result Name="RunDate" VariableName="User.RunDate"/>
								  
						
						  </Results>
						  <DirectInput>
							    SELECT CAST(CONVERT(VARCHAR(20), GETDATE(),20) AS DATETIME) AS RunDate
							   
						  </DirectInput>
					  </ExecuteSQL>
			  
			  
			  
			   <ExecuteSQL Name="Truncate NonClustedIndexProcessConfiguration Table" ConnectionName="DBConnection.PartitionConfigServer" ResultSet="None">
						  <PrecedenceConstraints>
				       <Inputs>
				         <Input OutputPathName="Set RunData Variable.Output"/>
				       </Inputs>
				     </PrecedenceConstraints>
					
					  <DirectInput>
						  
						  TRUNCATE TABLE [vulkan].[NonClustedIndexProcessConfiguration]
								  
					</DirectInput>
					  </ExecuteSQL>
			  
			
				     <ExecuteSQL Name="Fill Tables Variable" ConnectionName="DBConnection.PartitionConfigServer" ResultSet="Full">
						  <PrecedenceConstraints>
				       <Inputs>
				         <Input OutputPathName="Truncate NonClustedIndexProcessConfiguration Table.Output"/>
				       </Inputs>
				     </PrecedenceConstraints>
					  <Results>
						<Result Name="0" VariableName="User.Tables" />
					  </Results>
					  <DirectInput>SELECT 
									 [Schema], [Table]
     
								  FROM  [vulkan].[PartitionedTablesConfiguration]

								  WHERE [SubSystemName] = '<#=subSystem#>' AND Active = 'y'</DirectInput>
					  </ExecuteSQL>
				
			  
			  <ForEachAdoLoop Name="For Each Partitioned Table in <#=srcDbName#>" SourceVariableName="User.Tables" ConstraintMode="Parallel">
				       <PrecedenceConstraints>
				       <Inputs>
				         <Input OutputPathName="Fill Tables Variable.Output"/>
				       </Inputs>
				     </PrecedenceConstraints>
						
						<Variables>
                        
                    </Variables>
                    <VariableMappings>
						
						    <VariableMapping Name="0" VariableName="User.CurrentSchema" />
                            <VariableMapping Name="1" VariableName="User.CurrentTable" />
                           
                    </VariableMappings>
                     
                    <!-- execute some tasks using the variables passed from the dataset -->
                    <Tasks>
 
					
    <Dataflow Name="Data Flow Task">
         
          <Transformations>
            <OleDbSource Name="Generate Index Scripts" ConnectionName="<#=srcSrvr#>.<#=srcDbName#>">
              <Parameters>
                <Parameter Name="Parameter0:Input" VariableName="User.CurrentTable" />
                <Parameter Name="Parameter1:Input" VariableName="User.SubSystem" />
                <Parameter Name="Parameter2:Input" VariableName="User.DestinationServer" />
                <Parameter Name="Parameter3:Input" VariableName="User.SourceServer" />
                <Parameter Name="Parameter4:Input" VariableName="User.SourceDatabase" />
                <Parameter Name="Parameter5:Input" VariableName="User.DestinationDatabase" />
				<Parameter Name="Parameter6:Input" VariableName="User.RunDate" />
				<Parameter Name="Parameter7:Input" VariableName="User.CurrentSchema" />
				  
              </Parameters>
              <DirectInput>
				  
				  
DECLARE @Table NVARCHAR(200)
 DECLARE @RunDate DATETIME2
 DECLARE @SubSystem NVARCHAR(200)
 DECLARE @DestinationServer NVARCHAR(200)
DECLARE @SourceServer NVARCHAR(200)
DECLARE @SourceDatabase NVARCHAR(200)
DECLARE @DestinationDatabase NVARCHAR(200)
DECLARE @CurrentSchema NVARCHAR(200)


SET @Table =  ?
 SET @SubSystem =  ?
 SET @DestinationServer =  ?
 SET @SourceServer =  ?
 SET @SourceDatabase =  ?
 SET @DestinationDatabase =  ?
 SET @RunDate =  ?
 SET @CurrentSchema =  ?
 

SELECT 
@SubSystem AS SubSystemName, 
@SourceServer AS SourceServer,
@SourceDatabase AS SourceDatabase, 
@DestinationServer AS DestinationServer, 
@DestinationDatabase AS DestinationDatabase,
@CurrentSchema AS CurrentSchema,
@Table AS CurrentTable, 
@RunDate AS RunDate, 

'IF EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = object_id('''+ @CurrentSchema + '.' + @Table + ''') AND NAME ='''+ I.name +''' )  DROP INDEX ['+ I.name +'] ON [' + SCHEMA_NAME(T.schema_id) + '].[' + T.name + ']' AS DropIndexScript,
 ' IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = object_id('''+ @CurrentSchema + '.' + @Table + ''') AND NAME ='''+ I.name +''' ) 
 CREATE ' +
           CASE 
                WHEN I.is_unique = 1 THEN ' UNIQUE '
                ELSE ''
           END +
           I.type_desc COLLATE DATABASE_DEFAULT + ' INDEX [' +
           I.name + '] ON [' +
           SCHEMA_NAME(T.schema_id) + '].[' + T.name + '] ( ' +
           KeyColumns + ' )  ' +
           ISNULL(' INCLUDE (' + IncludedColumns + ' ) ', '') +
           ISNULL(' WHERE  ' + I.filter_definition, '') + ' WITH ( ' +
           CASE 
                WHEN I.is_padded = 1 THEN ' PAD_INDEX = ON '
                ELSE ' PAD_INDEX = OFF '
           END + ',' +
           'FILLFACTOR = ' + CONVERT(
               CHAR(5),
               CASE 
                    WHEN I.fill_factor = 0 THEN 100
                    ELSE I.fill_factor
               END
           ) + ',' +
           -- default value 
           'SORT_IN_TEMPDB = OFF ' + ',' +
           CASE 
                WHEN I.ignore_dup_key = 1 THEN ' IGNORE_DUP_KEY = ON '
                ELSE ' IGNORE_DUP_KEY = OFF '
           END + ',' +
           CASE 
                WHEN ST.no_recompute = 0 THEN ' STATISTICS_NORECOMPUTE = OFF '
                ELSE ' STATISTICS_NORECOMPUTE = ON '
           END + ',' +
           ' ONLINE = OFF ' + ',' +
           CASE 
                WHEN I.allow_row_locks = 1 THEN ' ALLOW_ROW_LOCKS = ON '
                ELSE ' ALLOW_ROW_LOCKS = OFF '
           END + ',' +
           CASE 
                WHEN I.allow_page_locks = 1 THEN ' ALLOW_PAGE_LOCKS = ON '
                ELSE ' ALLOW_PAGE_LOCKS = OFF '
           END + ' ) ON [' +
           DS.name + '] '  [CreateIndexScript]
 FROM   sys.indexes I
           JOIN sys.tables T
                ON  T.object_id = I.object_id
           JOIN sys.sysindexes SI
                ON  I.object_id = SI.id
                AND I.index_id = SI.indid
				AND I.type_desc = 'NONCLUSTERED'
           JOIN (
                    SELECT *
                    FROM   (
                               SELECT IC2.object_id,
                                      IC2.index_id,
                                      STUFF(
                                          (
                                              SELECT ' , ' + C.name + CASE 
                                                                           WHEN MAX(CONVERT(INT, IC1.is_descending_key)) 
                                                                                = 1 THEN 
                                                                                ' DESC '
                                                                           ELSE 
                                                                                ' ASC '
                                                                      END
                                              FROM   sys.index_columns IC1
                                                     JOIN sys.columns C
                                                          ON  C.object_id = IC1.object_id
                                                          AND C.column_id = IC1.column_id
                                                          AND IC1.is_included_column = 
                                                              0
                                              WHERE  IC1.object_id = IC2.object_id
                                                     AND IC1.index_id = IC2.index_id
                                              GROUP BY
                                                     IC1.object_id,
                                                     C.name,
                                                     index_id
                                              ORDER BY
                                                     MAX(IC1.key_ordinal) 
                                                     FOR XML PATH('')
                                          ),
                                          1,
                                          2,
                                          ''
                                      ) KeyColumns
                               FROM   sys.index_columns IC2 
                                     WHERE IC2.Object_id =  (	SELECT TOP 1 object_id
																	FROM  sys.tables
																	WHERE schema_id = SCHEMA_ID(@CurrentSchema) AND name = @Table  )--Comment for all tables
                               GROUP BY
                                      IC2.object_id,
                                      IC2.index_id
                           ) tmp3
                )tmp4
                ON  I.object_id = tmp4.object_id
                AND I.index_id = tmp4.index_id


           JOIN sys.stats ST
                ON  ST.object_id = I.object_id
                AND ST.stats_id = I.index_id
           JOIN sys.data_spaces DS
                ON  I.data_space_id = DS.data_space_id
           JOIN sys.filegroups FG
                ON  I.data_space_id = FG.data_space_id
           LEFT JOIN (
                    SELECT *
                    FROM   (
                               SELECT IC2.object_id,
                                      IC2.index_id,
                                      STUFF(
                                          (
                                              SELECT ' , ' + C.name
                                              FROM   sys.index_columns IC1
                                                     JOIN sys.columns C
                                                          ON  C.object_id = IC1.object_id
                                                          AND C.column_id = IC1.column_id
                                                          AND IC1.is_included_column = 
                                                              1
                                              WHERE  IC1.object_id = IC2.object_id
                                                     AND IC1.index_id = IC2.index_id
                                              GROUP BY
                                                     IC1.object_id,
                                                     C.name,
                                                     index_id 
                                                     FOR XML PATH('')
                                          ),
                                          1,
                                          2,
                                          ''
                                      ) IncludedColumns
                               FROM   sys.index_columns IC2 
                                     WHERE IC2.Object_id = (	SELECT TOP 1 object_id
																	FROM  sys.tables
																	WHERE schema_id = SCHEMA_ID(@CurrentSchema) AND name = @Table  )--Comment for all tables
                               GROUP BY
                                      IC2.object_id,
                                      IC2.index_id
                           ) tmp1
                    WHERE  IncludedColumns IS NOT NULL
                ) tmp2
                ON  tmp2.object_id = I.object_id
                AND tmp2.index_id = I.index_id
    --WHERE  
    --I.is_primary_key = 0
     --     AND 
     --I.is_unique_constraint = 0
           AND T.name NOT LIKE 'mt_%'
      --AND I.name NOT LIKE 'mt_%'
              AND I.Object_id = (	SELECT TOP 1 object_id
																	FROM  sys.tables
																	WHERE schema_id = SCHEMA_ID(@CurrentSchema) AND name = @Table  )--Comment for all tables
    --AND I.name = 'IX_Address_PostalCode' --comment for all indexes 
    ORDER BY T.name,I.name
			  
			  </DirectInput>
            </OleDbSource>
            <OleDbDestination Name="OLE DB Destination" ConnectionName="DBConnection.PartitionConfigServer">
              <InputPath OutputPathName="Generate Index Scripts.Output" />
              <ExternalTableOutput Table="[vulkan].[NonClustedIndexProcessConfiguration]" />
            </OleDbDestination>
          </Transformations>
        </Dataflow>
                     
                

					 
						
				      </Tasks>
                         
                </ForEachAdoLoop>
				 
				 
			   
				 
			    
	
			  
			     <!--End of Specific task-->
            
           </Tasks>
      
      
        </Container>
        
        
		 
       
			  
			        </Tasks>
      
      
      		
		</Package>
			
			
		<#}#>
		
		
		
	</Packages>
	
 
	
	
</Biml>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>