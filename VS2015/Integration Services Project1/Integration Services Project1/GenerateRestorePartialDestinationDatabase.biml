<Biml xmlns="http://schemas.varigence.com/biml.xsd">
	
<!--Get Connections-->

  <!-- ConfigConnString:  Add the connection to your config server/database here  -->

<# 
    String ConfigConnString="Data Source=VulkanDemoProd;Initial Catalog=VulkanConfig;Integrated Security=SSPI;Persist Security Info=False;Provider=SQLOLEDB.1"; 
	DataTable restoreList = ExternalDataAccess.GetDataTable(ConfigConnString, "SELECT DISTINCT SubSystemName, DestinationServer, DestinationDatabase, CASE WHEN FullOrPartialBackup = 'Partial' THEN 'PARTIAL' ELSE 'FULL' END AS PartialBackupRestore, BackupFilePathBakFileDestinationServer,RecoverModeDestinationDatabase FROM [vulkan].[BackupRestorePartialDatabaseConfiguration] WHERE Active = 'y'");
	DataTable databaseList = ExternalDataAccess.GetDataTable(ConfigConnString, "SELECT DISTINCT DestinationServer, DestinationDatabase FROM [vulkan].[BaseConfiguration] WHERE Active = 'y'");
	DataTable serverList = ExternalDataAccess.GetDataTable(ConfigConnString, "SELECT DISTINCT DestinationServer FROM [vulkan].[BaseConfiguration] WHERE Active = 'y'");
	#>
	
	
	
 <Connections>
	 <# foreach(DataRow db in databaseList.Rows) { 
			String srvr = db["DestinationServer"].ToString();
		    String dbName = db["DestinationDatabase"].ToString();
	 #>
	
    <Connection Name="<#=srvr#>.<#=dbName#>" ConnectionString="Data Source=<#=srvr#>;Initial Catalog=<#=dbName#>;Integrated Security=SSPI;Persist Security Info=False;Provider=SQLOLEDB.1" />
     <#}#>
		 
		 
	<# foreach(DataRow srv in serverList.Rows) {
			String srvr = srv["DestinationServer"].ToString();
	#>
	<Connection Name="<#=srvr#>.master" ConnectionString="Data Source=<#=srvr#>;Initial Catalog=master;Integrated Security=SSPI;Persist Security Info=False;Provider=SQLOLEDB.1" />
	<#}#>	 
		
	 <OleDbConnection Name="DBConnection.ConfigServer" ConnectionString="Data Source=VulkanDemoProd;Initial Catalog=VulkanConfig;Integrated Security=SSPI;Persist Security Info=False;Provider=SQLOLEDB.1"></OleDbConnection>
	<OleDbConnection Name="DBConnection.LogServer" ConnectionString="Data Source=VulkanDemoProd;Initial Catalog=VulkanConfig;Integrated Security=SSPI;Persist Security Info=False;Provider=SQLOLEDB.1"></OleDbConnection>
  	
	 
   </Connections>	
	
	
	
	<Packages>
	
	  <!-- ConnString:  Add the connection to your config server/database here  -->
		
		<# foreach(DataRow rst in restoreList.Rows) 
		{
					
			String subSystem = rst["SubSystemName"].ToString();
			
			String destSrvr = rst["DestinationServer"].ToString();
			
			String destDbName = rst["DestinationDataBase"].ToString();
			
			String destPath = rst["BackupFilePathBakFileDestinationServer"].ToString();
			
		    String PartialOrFull = rst["PartialBackupRestore"].ToString();
			
			String recModeDest = rst["RecoverModeDestinationDatabase"].ToString();
			
			String destFilePathFull = destPath + destDbName + ".bak";
			
		    String ConnString="Data Source=VulkanDemoProd;Initial Catalog=VulkanConfig;User Id=vulkanbiml;Password=TitanStopSign2%;Persist Security Info=False"; 
			
			String sql = @"SELECT COALESCE(STUFF((
									SELECT DISTINCT CONCAT(',', CHAR(10), ' FILE = ''', LogicalName, '''')
									FROM [vulkan].[DatabaseFilesConfiguration]
									WHERE SubSystemName = @SubSystem
									AND [Database] = @Database
									AND Type = 'DataFile'
									AND Active = 'y'
									FOR XML PATH('')
								), 1, 1, ''), '')";
			
			String fileGroups = "";  
			if (PartialOrFull != "") {
				using (var con = new SqlConnection(ConnString)) {
					using (var cmd = new SqlCommand(sql, con)) {
						cmd.Parameters.AddWithValue("@SubSystem", subSystem);
						cmd.Parameters.AddWithValue("@Database", destDbName);
						con.Open();
						fileGroups = (String)cmd.ExecuteScalar();
					}
				}
			}
			
			String sql2 = @"SELECT COALESCE(STUFF((
									SELECT CONCAT(',', CHAR(10),' MOVE N''', [LogicalName], ''' TO N''', [FilePathDestination] , '''')
									FROM [vulkan].[DatabaseFilesConfiguration]
									WHERE [SubSystemName] = @SubSystem 
									AND [Database] = @Database
									AND Active = 'y'
									FOR XML PATH('')
														), 1, 1, ''), '')";
			
			String dataFiles;  
			
			using (var con = new SqlConnection(ConnString)) {
				using (var cmd = new SqlCommand(sql2, con)) {
					cmd.Parameters.AddWithValue("@SubSystem", subSystem);
					cmd.Parameters.AddWithValue("@Database", destDbName);
					con.Open();
					dataFiles = (String)cmd.ExecuteScalar();
				}
			}
			
			
			
		#>
		<Package Name="RestorePartialDestinationDatabase_<#=subSystem#>_<#=destDbName#>">
		
	 
			
	    <Variables>		
			
		 
			<Variable Name="FilePathBakFileDestinationServer" DataType="String"><#=destFilePathFull#></Variable>
			<Variable Name="CurrentRecoveryMode" DataType="String"><#=recModeDest#></Variable>
			
			
		</Variables>
				   
			
			<Tasks>
				
				<Container Name="Pakkens innhold" ForcedExecutionValueDataType="Empty" ConstraintMode="Parallel">
          
          
          <Tasks>
      
				 <!--Specific task: Create Data flow transformation to load table.-->
			  
			    <ExecuteSQL Name="Set Recovery Mode to full" ConnectionName="<#=destSrvr#>.master" ResultSet="SingleRow">
         
          <Results>
            <Result Name="CurrentRecoveryMode" VariableName="User.CurrentRecoveryMode" />
          </Results>
          <DirectInput>
DECLARE @RecoveryMode VARCHAR(6) = (SELECT recovery_model_desc AS CurrentRecoveryMode
   FROM sys.databases  
      WHERE name = '<#=destDbName#>')

IF @RecoveryMode = 'SIMPLE'
BEGIN
     ALTER DATABASE <#=destDbName#>
		SET RECOVERY FULL WITH NO_WAIT
END

SELECT @RecoveryMode AS CurrentRecoveryMode 
			</DirectInput>
        </ExecuteSQL>
			  
			
			
				 
	
				<ExecuteSQL ConnectionName="<#=destSrvr#>.master" Name="Kill Connection to <#=destDbName#>">
				
				 <PrecedenceConstraints>
            <Inputs>
              <Input OutputPathName="Set Recovery Mode to full.Output" />
            </Inputs>
          </PrecedenceConstraints>
				
				<DirectInput>
					
					<![CDATA[		
					
					        DECLARE @DatabaseName AS VARCHAR(100)

							SET @DatabaseName = '<#=destDbName#>'

							USE master

							SET NOCOUNT ON
							DECLARE @DBName varchar(50)
							DECLARE @spidstr varchar(8000)
							DECLARE @ConnKilled smallint
							SET @ConnKilled=0
							SET @spidstr = ''
							
							IF EXISTS (SELECT name FROM master.sys.databases WHERE name = @DatabaseName)

							Set @DBName = @DatabaseName
							IF db_id(@DBName) < 4
							BEGIN
							PRINT 'Connections to system databases cannot be killed'
							RETURN
							END
							SELECT @spidstr=coalesce(@spidstr,'','' )+'kill '+convert(varchar, spid)+ '; '
							FROM master..sysprocesses WHERE dbid=db_id(@DBName)

							IF LEN(@spidstr) > 0
							BEGIN
							EXEC(@spidstr)
							SELECT @ConnKilled = COUNT(1)
							FROM master..sysprocesses WHERE dbid=db_id(@DBName)
							
							END 
					]]>
					
				</DirectInput>
			</ExecuteSQL>
				   
	
					 
			
							
							
						
							
					
				
				
			 
			 
				
				<ExecuteSQL Name="Restore <#=destDbName#>" ConnectionName="<#=destSrvr#>.master" >
				
				  <PrecedenceConstraints>
						<Inputs>
						  <Input OutputPathName="Kill Connection to <#=destDbName#>.Output" />
						</Inputs>
					  </PrecedenceConstraints>
				
				<DirectInput>
					
					<![CDATA[		
					
					        RESTORE DATABASE [<#=destDbName#>] 
                            <#=fileGroups#>
                            FROM DISK = '<#=destFilePathFull#>'

							WITH 
							
							REPLACE,
							NOUNLOAD
						

;

					]]>
					
				</DirectInput>
			</ExecuteSQL>
					 
						
				
		   <ExecuteSQL Name="Set <#=destDbName#> Recovery Mode" ConnectionName="<#=destSrvr#>.master">
          <PrecedenceConstraints>
            <Inputs>
              <Input OutputPathName="Restore <#=destDbName#>.Output"/>
            </Inputs>
          </PrecedenceConstraints>
			   
	
          <DirectInput>
			  
			  	<![CDATA[	
						
						
						
						BEGIN
							ALTER DATABASE <#=destDbName#>
						         SET RECOVERY <#=recModeDest#> WITH NO_WAIT
						END;
				]]>
			  
       </DirectInput>
        </ExecuteSQL>
			  
			  
			  		     
			
			
      
     
		  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			     <!--End of Specific task-->
            
           </Tasks>
      
      
        </Container>
        
         	  
			        </Tasks>
      
      
       		
		</Package>
			
			
		<#}#>
		
		
		
	</Packages>
	
	 
	
	
</Biml>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>